{"version":3,"file":"static/js/432.9f8f6ef9.chunk.js","mappings":"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","sources":["components/Paleosoil/PaleoIcons.js","components/Popup/PopupPaleoSoil.jsx","components/Paleosoil/PaleoSoil.jsx","components/NatureArea/NatureArea.jsx","components/Soil/Soil.jsx","components/Map/MapPaleo.jsx","views/MapView.jsx"],"sourcesContent":["import L from 'leaflet';\r\n\r\nconst Al = L.icon({\r\n    iconUrl: require('../../assets/Icon/AL.png'),\r\n    iconSize: [20, 20],\r\n    popupAnchor: [0, 0],\r\n  });\r\n  \r\n  const At = L.icon({\r\n    iconUrl: require('../../assets/Icon/AT.png'),\r\n    iconSize: [20, 20],\r\n    popupAnchor: [0, 0],\r\n  });\r\n  \r\n  const Bl = L.icon({\r\n    iconUrl: require('../../assets/Icon/BL.png'),\r\n    iconSize: [20, 20],\r\n    popupAnchor: [0, 0],\r\n  });\r\n  \r\n  const Bo = L.icon({\r\n    iconUrl: require('../../assets/Icon/BO.png'),\r\n    iconSize: [20, 20],\r\n    popupAnchor: [0, 0],\r\n  });\r\n  \r\n  const Pb = L.icon({\r\n    iconUrl: require('../../assets/Icon/PB.png'),\r\n    iconSize: [20, 20],\r\n    popupAnchor: [0, 0],\r\n  });\r\n  \r\n  const Sa = L.icon({\r\n    iconUrl: require('../../assets/Icon/SA.png'),\r\n    iconSize: [20, 20],\r\n    popupAnchor: [0, 0],\r\n  });\r\n  \r\n  const Sb = L.icon({\r\n    iconUrl: require('../../assets/Icon/SB.png'),\r\n    iconSize: [20, 20],\r\n    popupAnchor: [0, 0],\r\n  });\r\n  \r\n  const def = L.icon({\r\n    iconUrl: require('../../assets/Icon/default.png'),\r\n    iconSize: [20, 20],\r\n    popupAnchor: [0, 0],\r\n  });\r\n\r\n  const Icons = {Al, At, Bl, Bo, Pb, Sa, Sb, def}\r\n\r\n  export default Icons;","import './Popup.css';\r\n\r\nconst PopupPaleoSoil = ({ props }) => {\r\n  return (\r\n    <div className='DescriptionAll'>\r\n        <p><b>Поселення:</b> {props.settlement}</p>\r\n        <p><b>Район:</b> {props.district}</p>\r\n        <p><b>Область:</b> {props.region}</p>\r\n        <p><b>Широта:</b> {props.y}</p>\r\n        <p><b>Довгота:</b> {props.x}</p>\r\n        <p><b>Природна зона:</b> {props.natural_zones}</p>\r\n        <p><b>Край/провінція:</b> {props.physiographical_l}</p>\r\n        <p><b>Приуроченість(природна/історична):</b> {props.locality}</p>\r\n        <p><b>Обє'кт (природний/історичний):</b> {props.object}</p>\r\n        <p><b>Дослідник:</b> {props.researcher}</p>\r\n        <p><b>Рік вивчення:</b> {props.year}</p>\r\n        <p><b>Використані методи дослідження:</b> {props.research_methods}</p>\r\n        <p><b>Сучасний тип ґрунту:</b> {props.modern_soil}</p>\r\n        <p><b>Потужність розірзу (м.):</b> {props.soil_m}</p>\r\n        <p><b>Похований ґрунт:</b> {props.buried_soil}</p>\r\n        <p><b>Потужність (м.):</b> {props.paleosoil_m}</p>\r\n        <p><b>Хроноітервал голоцену:</b> {props.period_holocene}</p>\r\n        <p><b>Археологічне датування/ датування:</b> {props.arch_dating}</p>\r\n        <p><b>Фото:</b> <a href={props.foto} target='_blank' rel=\"noopener noreferrer\">{props.foto}</a></p>\r\n        <p><b>Література:</b> {props.references}</p>\r\n        <p><b>Документ PDF:</b><a href={props.pdf} target='_blank'  rel=\"noopener noreferrer\">{props.pdf}</a></p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PopupPaleoSoil;\r\n","import { Marker, Popup } from 'react-leaflet';\r\nimport Icons from '../Paleosoil/PaleoIcons';\r\nimport PopupPaleoSoil from '../Popup/PopupPaleoSoil';\r\n// import { useGetPointsQuery } from '../../redux/paleosoil/paleosoilFetch';\r\n// import MarkerClusterGroup from \"react-leaflet-markercluster\";\r\n// import \"react-leaflet-markercluster/dist/styles.min.css\";\r\n\r\nfunction IconType(type) {\r\n  if (type === 'AL - Allerod') {\r\n    return Icons.Al;\r\n  }\r\n  if (type === 'AT - Atlantic') {\r\n    return Icons.At;\r\n  }\r\n  if (type === 'BL - Bolling') {\r\n    return Icons.Bl;\r\n  }\r\n  if (type === 'ВО - Boreal') {\r\n    return Icons.Bo;\r\n  }\r\n  if (type === 'PB - Preboreal') {\r\n    return Icons.Pb;\r\n  }\r\n  if (type === 'SA - Subatlantic') {\r\n    return Icons.Sa;\r\n  }\r\n  if (type === 'SB - Subboreal') {\r\n    return Icons.Sb;\r\n  } else {\r\n    return Icons.def;\r\n  }\r\n}\r\n\r\nfunction Paleosoil({ points }) {\r\n  return (\r\n    <>\r\n      {points.map(point => {\r\n        const latitude = point.y;\r\n        const longitude = point.x;\r\n        return (\r\n          <Marker\r\n            position={[longitude, latitude]}\r\n            key={point.id}\r\n            icon={IconType(point.period_holocene)}\r\n          >\r\n            <Popup>\r\n              <PopupPaleoSoil props={point} />\r\n            </Popup>\r\n          </Marker>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Paleosoil;\r\n","import { GeoJSON } from 'react-leaflet';\r\nfunction NaturalArea({ data }) {\r\n  const mapPolygonColorNaturalArea = area => {\r\n    return area === 'зона мішаних лісів'\r\n      ? 'rgba(71,186,144,0.75)'\r\n      : area === 'зона широколистих лісів'\r\n      ? 'rgba(65,159,83,0.75)'\r\n      : area === 'Лісостепова зона'\r\n      ? 'rgba(130,159,75,0.75)'\r\n      : area === 'Степова зона'\r\n      ? 'rgba(208,219,43,0.75)'\r\n      : area === 'Кримські гори'\r\n      ? 'rgba(156,111,198,0.75)'\r\n      : area === 'Українські Карпати'\r\n      ? 'rgba(210,105,97,0.75)'\r\n      : '#fff';\r\n  };\r\n\r\n  const stylingNaturalArea = feature => {\r\n    return {\r\n      opacity: 1,\r\n      color: 'rgba(0,0,0,0.1)',\r\n      lineCap: 'butt',\r\n      lineJoin: 'miter',\r\n      weight: 1.0,\r\n      fill: true,\r\n      fillOpacity: 1,\r\n      fillColor: mapPolygonColorNaturalArea(feature.properties.name),\r\n      interactive: true,\r\n    };\r\n  };\r\n\r\n  const onEachFeature = (e, layer) => {\r\n    let { name } = e.properties;\r\n\r\n    layer.bindPopup(`<table>\r\n        <tr>\r\n          <td><b>Зона</b></td>\r\n          <td>${name}</td>\r\n        </tr>\r\n      </table>`);\r\n  };\r\n\r\n  return (\r\n    <GeoJSON\r\n      data={data.features}\r\n      style={stylingNaturalArea}\r\n      onEachFeature={onEachFeature}\r\n    ></GeoJSON>\r\n  );\r\n}\r\n\r\nexport default NaturalArea;\r\n","import { GeoJSON} from 'react-leaflet';\r\n\r\nfunction Soil({ data }) {\r\n\r\n  const mapPolygonColorSoil = id => {\r\n    return id === 1\r\n      ? 'rgba(234,231,175,1.0)'\r\n      : id === 2\r\n      ? 'rgba(248,233,169,1.0)'\r\n      : id === 3\r\n      ? 'rgba(255,210,181,1.0)'\r\n      : id === 4\r\n      ? 'rgba(234,204,180,1.0)'\r\n      : id === 5\r\n      ? 'rgba(227,183,154,1.0)'\r\n      : id === 6\r\n      ? 'rgba(207,199,137,1.0)'\r\n      : id === 7\r\n      ? 'rgba(189,184,142,1.0)'\r\n      : id === 8\r\n      ? 'rgba(178,163,120,1.0)'\r\n      : id === 9\r\n      ? 'rgba(213,190,174,1.0)'\r\n      : id === 10\r\n      ? 'rgba(202,150,129,1.0)'\r\n      : id === 11\r\n      ? 'rgba(204,193,197,1.0)'\r\n      : id === 12\r\n      ? 'rgba(146,134,138,1.0)'\r\n      : id === 13\r\n      ? 'rgba(157,129,118,1.0)'\r\n      : id === 14\r\n      ? 'rgba(183,166,156,1.0)'\r\n      : id === 15\r\n      ? 'rgba(205,192,184,1.0)'\r\n      : id === 16\r\n      ? 'rgba(219,212,202,1.0)'\r\n      : id === 17\r\n      ? 'rgba(207,175,178,1.0)'\r\n      : id === 18\r\n      ? 'rgba(185,140,101,1.0)'\r\n      : id === 19\r\n      ? 'rgba(194,159,155,1.0)'\r\n      : id === 20\r\n      ? 'rgba(161,144,150,1.0)'\r\n      : id === 21\r\n      ? 'rgba(215,214,212,1.0)'\r\n      : id === 22\r\n      ? 'rgba(177,160,153,1.0)'\r\n      : id === 23\r\n      ? 'rgba(86,140,135,1.0)'\r\n      : id === 24\r\n      ? 'rgba(128,152,130,1.0)'\r\n      : id === 25\r\n      ? 'rgba(216,218,178,1.0)'\r\n      : id === 26\r\n      ? 'rgba(226,170,199,1.0)'\r\n      : id === 27\r\n      ? 'rgba(198,124,113,1.0)'\r\n      : id === 28\r\n      ? 'rgba(216,183,176,1.0)'\r\n      : id === 29\r\n      ? 'rgba(150,185,150,1.0)'\r\n      : id === 30\r\n      ? 'rgba(178,205,158,1.0)'\r\n      : id === 31\r\n      ? 'rgba(108,133,100,1.0)'\r\n      : id === 32\r\n      ? 'rgba(149,91,132,1.0)'\r\n      : id === 33\r\n      ? 'rgba(233,191,224,1.0)'\r\n      : id === 34\r\n      ? 'rgba(121,145,109,1.0)'\r\n      : id === 35\r\n      ? 'rgba(220,175,153,1.0)'\r\n      : id === 36\r\n      ? 'rgba(227,189,197,1.0)'\r\n      : id === 37\r\n      ? 'rgba(150,66,67,1.0)'\r\n      : id === 38\r\n      ? 'rgba(224,202,181,1.0)'\r\n      : id === 39\r\n      ? 'rgba(117,80,116,1.0)'\r\n      : id === 40\r\n      ? 'rgba(247,217,192,1.0)'\r\n      : id === 41\r\n      ? 'rgba(222,145,130,1.0)'\r\n      : 'fff';\r\n  };\r\n\r\n  const stylingSoil = features => {\r\n    return {\r\n      opacity: 1,\r\n      color: 'rgba(0,0,0,0.1)',\r\n      lineCap: 'butt',\r\n      lineJoin: 'miter',\r\n      weight: 1.0,\r\n      fill: true,\r\n      fillOpacity: 0.7,\r\n      fillColor: mapPolygonColorSoil(features.properties.Id),\r\n      interactive: true,\r\n    };\r\n  };\r\n\r\n  const onEachFeature = (e, layer) => {\r\n      let {Name, Class} = e.properties;\r\n\r\n      layer.bindPopup(`<table>\r\n      <tr>\r\n        <td className=\"SoilPopup\"><b>Ґрунт</b></td>\r\n        <td className=\"SoilPopup\">${Name}</td>\r\n      </tr>\r\n      <tr>\r\n        <td className=\"SoilPopup\"><b>Клас</b></td>\r\n        <td className=\"SoilPopup\">${Class}</td>\r\n      </tr>\r\n    </table>`)\r\n  }\r\n\r\n  return (\r\n    <GeoJSON data={data} style={stylingSoil} id={data.features.Id} onEachFeature={onEachFeature}>\r\n    </GeoJSON>\r\n  );\r\n}\r\n\r\nexport default Soil;\r\n","import { useEffect } from 'react';\r\nimport {\r\n  MapContainer,\r\n  TileLayer,\r\n  LayersControl,\r\n  FeatureGroup,\r\n} from 'react-leaflet';\r\nimport Paleosoil from '../Paleosoil/PaleoSoil';\r\nimport NaturalArea from '../NatureArea/NatureArea';\r\n// import Landscape from '../Landspace/Landscape';\r\nimport Soil from '../Soil/Soil';\r\n\r\nimport natural_area from '../../data/natural_area.json';\r\nimport soil from '../../data/soil.json';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n  getAllPaleosoilPoint,\r\n  fetchPaleosoilPoint,\r\n} from '../../redux/paleosoil';\r\n// import landscape from '../../data/landscape.json'\r\n\r\nimport './MapPaleo.css';\r\n\r\nfunction MapPaleo() {\r\n  const data = useSelector(getAllPaleosoilPoint);\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatch(fetchPaleosoilPoint());\r\n  }, [dispatch]);\r\n  // console.log(data);\r\n  return (\r\n    <MapContainer center={[49.0377, 31.3193]} zoom={6} scrollWheelZoom={true}>\r\n      <LayersControl position=\"topright\">\r\n        <LayersControl.Overlay checked name=\"Paleosoil\">\r\n          <FeatureGroup>\r\n            <Paleosoil points={data} />\r\n          </FeatureGroup>\r\n        </LayersControl.Overlay>\r\n        <LayersControl.Overlay checked name=\"Natural Area\">\r\n          <NaturalArea data={natural_area} />\r\n        </LayersControl.Overlay>\r\n        <LayersControl.Overlay name=\"Soil\">\r\n          <Soil data={soil} />\r\n        </LayersControl.Overlay>\r\n        <LayersControl.BaseLayer checked name=\"OpenStreetMap\">\r\n          <TileLayer\r\n            attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          />\r\n        </LayersControl.BaseLayer>\r\n        <LayersControl.BaseLayer name=\"OpenTopoMap\">\r\n          <TileLayer\r\n            attribution='Map data: &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors, <a href=\"http://viewfinderpanoramas.org\">SRTM</a> | Map style: &copy; <a href=\"https://opentopomap.org\">OpenTopoMap</a> (<a href=\"https://creativecommons.org/licenses/by-sa/3.0/\">CC-BY-SA</a>)'\r\n            url=\"https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png\"\r\n          />\r\n        </LayersControl.BaseLayer>\r\n      </LayersControl>\r\n    </MapContainer>\r\n  );\r\n}\r\n\r\nexport default MapPaleo;\r\n","import MapPaleo from '../components/Map/MapPaleo'\r\n\r\nconst MapView = () => {\r\n    return(\r\n            <MapPaleo/>\r\n        \r\n    )\r\n}\r\n\r\nexport default MapView;"],"names":["Al","L","iconUrl","require","iconSize","popupAnchor","At","Bl","Bo","Pb","Sa","Sb","def","props","className","settlement","district","region","y","x","natural_zones","physiographical_l","locality","object","researcher","year","research_methods","modern_soil","soil_m","buried_soil","paleosoil_m","period_holocene","arch_dating","href","foto","target","rel","references","pdf","points","map","point","type","latitude","longitude","Marker","position","icon","Icons","Popup","id","data","GeoJSON","features","style","feature","opacity","color","lineCap","lineJoin","weight","fill","fillOpacity","fillColor","area","properties","name","interactive","onEachFeature","e","layer","bindPopup","Id","Name","Class","useSelector","getAllPaleosoilPoint","dispatch","useDispatch","useEffect","fetchPaleosoilPoint","MapContainer","center","zoom","scrollWheelZoom","LayersControl","checked","FeatureGroup","natural_area","soil","TileLayer","attribution","url"],"sourceRoot":""}
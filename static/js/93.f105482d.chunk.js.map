{"version":3,"file":"static/js/93.f105482d.chunk.js","mappings":"6MAOA,EALoBA,EAAAA,KAAaC,MAAM,CACrCC,MAAOF,EAAAA,KAAaE,MAAM,8BAA8BC,SAAS,YACjEC,SAAUJ,EAAAA,KAAaK,IAAI,GAAGC,UAAUH,SAAS,c,8BC0EnD,EAtEc,WACZ,IAAMI,GAAWC,EAAAA,EAAAA,MAEXC,EAAQ,yCAAG,WAAOC,EAAQC,GAAf,8FAELT,EAAoBQ,EAApBR,MAAOE,EAAaM,EAAbN,SACfG,EAASK,EAAAA,EAAAA,MAAqB,CAAEV,MAAAA,EAAOE,SAAAA,KAH1B,SAIP,IAAIS,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAAS,QAJpC,OAKbH,EAAQK,YALK,yGAAH,wDASd,GAQIC,EAAAA,EAAAA,IAAU,CACZC,cAAe,CACbhB,MAAO,GACPE,SAAU,IAEZe,iBAAkBC,EAClBX,SAAAA,IAbAC,EADF,EACEA,OACAW,EAFF,EAEEA,OACAC,EAHF,EAGEA,QACAC,EAJF,EAIEA,aACAC,EALF,EAKEA,WACAC,EANF,EAMEA,aACAC,EAPF,EAOEA,aAUF,OACE,kBAAMjB,SAAUiB,EAAcC,UAAU,OAAxC,WACE,kBAAOC,QAAQ,QAAf,oBACA,kBACEC,MAAOnB,EAAOR,MACd4B,GAAG,QACHC,KAAK,QACLC,YAAY,mBACZC,OAAQT,EACRU,SAAUT,EACVE,UAAWN,EAAOnB,OAASoB,EAAQpB,MAAQ,cAAgB,KAE5DmB,EAAOnB,OAASoB,EAAQpB,QAAS,cAAGyB,UAAU,QAAb,SAAsBN,EAAOnB,SAC/D,kBAAO0B,QAAQ,WAAf,uBACA,kBACEE,GAAG,WACHC,KAAK,WACLC,YAAY,sBACZH,MAAOnB,EAAON,SACd8B,SAAUT,EACVQ,OAAQT,EACRG,UAAWN,EAAOjB,UAAYkB,EAAQlB,SAAW,cAAgB,KAElEiB,EAAOjB,UAAYkB,EAAQlB,WAC1B,cAAGuB,UAAU,QAAb,SAAsBN,EAAOjB,YAE/B,SAAC+B,EAAA,EAAD,CACEC,SAAUb,EACVQ,KAAK,SACLM,QAAQ,YACRC,MAAM,UACNC,MAAO,CACLC,OAAQ,QANZ,uBC1DN,EAHkB,WAChB,OAAO,SAAC,EAAD","sources":["schemas/loginSchema.js","components/Login/Login.jsx","views/LoginView.jsx"],"sourcesContent":["import * as yup from 'yup';\r\n\r\nconst loginSchema = yup.object().shape({\r\n  email: yup.string().email('Please enter a valid email').required('Required'),\r\n  password: yup.string().min(6).matches().required('Required'),\r\n});\r\n\r\nexport default loginSchema;\r\n","import { useFormik } from 'formik';\r\nimport { Button } from '@mui/material';\r\nimport loginSchema from '../../schemas/loginSchema';\r\nimport { useDispatch } from 'react-redux';\r\nimport authOperations from '../../redux/auth/authOperations';\r\n\r\nimport './Login.css';\r\n\r\nconst Login = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const onSubmit = async (values, actions) => {\r\n    try {\r\n      const { email, password } = values;\r\n      dispatch(authOperations.login({ email, password }));\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      actions.resetForm();\r\n    } catch (error) {}\r\n  };\r\n\r\n  const {\r\n    values,\r\n    errors,\r\n    touched,\r\n    isSubmitting,\r\n    handleBlur,\r\n    handleChange,\r\n    handleSubmit,\r\n  } = useFormik({\r\n    initialValues: {\r\n      email: '',\r\n      password: '',\r\n    },\r\n    validationSchema: loginSchema,\r\n    onSubmit,\r\n  });\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"Form\">\r\n      <label htmlFor=\"email\">Email</label>\r\n      <input\r\n        value={values.email}\r\n        id=\"email\"\r\n        type=\"email\"\r\n        placeholder=\"Enter your email\"\r\n        onBlur={handleBlur}\r\n        onChange={handleChange}\r\n        className={errors.email && touched.email ? 'input-error' : ''}\r\n      />\r\n      {errors.email && touched.email && <p className=\"error\">{errors.email}</p>}\r\n      <label htmlFor=\"password\">Password</label>\r\n      <input\r\n        id=\"password\"\r\n        type=\"password\"\r\n        placeholder=\"Enter your password\"\r\n        value={values.password}\r\n        onChange={handleChange}\r\n        onBlur={handleBlur}\r\n        className={errors.password && touched.password ? 'input-error' : ''}\r\n      />\r\n      {errors.password && touched.password && (\r\n        <p className=\"error\">{errors.password}</p>\r\n      )}\r\n      <Button\r\n        disabled={isSubmitting}\r\n        type=\"submit\"\r\n        variant=\"contained\"\r\n        color=\"success\"\r\n        style={{\r\n          margin: '15px',\r\n        }}\r\n      >\r\n        Login\r\n      </Button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import Login from '../components/Login/Login';\r\n\r\nconst LoginView = () => {\r\n  return <Login />;\r\n};\r\nexport default LoginView;\r\n"],"names":["yup","shape","email","required","password","min","matches","dispatch","useDispatch","onSubmit","values","actions","authOperations","Promise","resolve","setTimeout","resetForm","useFormik","initialValues","validationSchema","loginSchema","errors","touched","isSubmitting","handleBlur","handleChange","handleSubmit","className","htmlFor","value","id","type","placeholder","onBlur","onChange","Button","disabled","variant","color","style","margin"],"sourceRoot":""}